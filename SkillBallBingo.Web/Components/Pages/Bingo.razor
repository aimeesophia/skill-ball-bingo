@page "/"
@using SkillBallBingo.Application.Enums
@using SkillBallBingo.Application.Models
@rendermode InteractiveServer
@inject IJSRuntime JS

<PageTitle>Skill Ball Bingo</PageTitle>

@if (_game is not null)
{
    <table class="table table-bordered w-50">
        @foreach (var row in _game.Ticket)
        {
            <tr>
                @foreach (var cell in row)
                {
                    if (cell is { IsMarked: true })
                    {
                        <td class="bg-success-subtle">
                            @cell.Number
                        </td>
                    }
                    else
                    {
                        <td>
                            @cell?.Number
                        </td>
                    }
                }
            </tr>
        }
    </table>

    @if (!_game.IsOver)
    {
        <br/>
        @_game.CurrentNumber
        <br/>
        
        <div class="btn-group" role="group">
            <button type="button" class="btn btn-success" @onclick="_game.AcceptCurrentNumber">Accept</button>
            <button type="button" class="btn btn-danger" @onclick="_game.RejectCurrentNumber">Reject</button>
        </div>
        
        <CountdownTimer @ref="_timer" Seconds="10" OnCountdownFinished="HandleFinished"/>
        
        @for (int i = 0; i < _game.Lives; i++)
        {
            <h1>O</h1>
        }
    }
    
    @if (_game.IsOver)
    {
        <div class="modal show" tabindex="-1" style="display: block;">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">
                            @switch (_game.Result)
                            {
                                case Result.Win:
                                    @("You Win!")
                                    break;
                                case Result.Lose:
                                    @("Game Over")
                                    break;
                                default:
                                    @("Game Status")
                                    break;
                            }
                        </h5>
                    </div>
                    <div class="modal-body">
                        <p>
                            @switch (_game.Result)
                            {
                                case Result.Win:
                                    @("Congratulations! You've completed the game successfully!")
                                    break;
                                case Result.Lose:
                                    @("You lost the game! Better luck next time.")
                                    break;
                                default:
                                    @("Game has ended.")
                                    break;
                            }
                        </p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-success" @onclick="StartNewGame">Play Again</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop show"></div>
    }
    
    @if (_game.HasBingo)
    {
        <h1>Bingo!</h1>
    }
}

@if (_game is null)
{
    <button class="btn btn-primary" @onclick="StartGame">New Game</button>
}

@code {
    private Game? _game;
    private CountdownTimer? _timer;
    private bool _startTimer;

    private void StartGame()
    {
        _game = new Game();
        _startTimer = true;
    }

    private void HandleFinished()
    {
        _game!.IsOver = true;
        _game!.Result = Result.Lose;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_startTimer && _timer != null)
        {
            _timer.Start();
            _startTimer = false;
        }

        if (firstRender)
        {
            await JS.InvokeVoidAsync("keyboardInterop.initialize",
                DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public Task OnKeyDown(string key)
    {
        if (_game is null || _game.IsOver)
        {
            return Task.CompletedTask;
        }

        switch (key)
        {
            case "a":
                _game.AcceptCurrentNumber();
                break;
            case "r":
                _game.RejectCurrentNumber();
                break;
        }
        
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void StartNewGame()
    {
        _game = new Game();
        _startTimer = true;
    }
}
