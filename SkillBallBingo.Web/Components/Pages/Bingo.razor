@page "/"
@using SkillBallBingo.Application.Enums
@using SkillBallBingo.Application.Models
@rendermode InteractiveServer
@inject IJSRuntime Js

<PageTitle>Skill Ball Bingo</PageTitle>

<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Baloo+2:wght@400..800&family=Honk:SHLN@0&display=swap" rel="stylesheet">

<div class="game-title honk-font">SKILL BALL</div>
<div class="game-subtitle honk-font">BINGO</div>

@if (_game is not null)
{
    @if (!_game.IsOver)
    {
        <div class="d-flex justify-content-center align-items-center gap-4 mb-4">
            <!-- Bingo Ball -->
            <div class="bingo-ball-outer">
                <div class="bingo-ball-inner">@_game.CurrentNumber</div>
            </div>

            <!-- Timer Box -->
            <div class="game-timer-box">
                <div class="timer-icon">⏱</div> <div class="timer-text">@_game.Timer.DisplayTime</div>
            </div>
        </div>

        
        <table class="bingo-card">
            @foreach (var row in _game.Ticket)
            {
                <tr>
                    @foreach (var cell in row)
                    {
                        switch (cell)
                        {
                            case null:
                                <td class="cell empty"></td>
                                break;
                            case { IsMarked: true }:
                                <td class="cell highlight">
                                    @cell.Number
                                </td>
                                break;
                            default:
                                <td class="cell">
                                    @cell.Number
                                </td>
                                break;
                        }
                    }
                </tr>
            }
        </table>
        
        <div class="ball-tray">
            @foreach (var number in _game.CalledNumbers)
            {
                var backgroundColour = GetBallBackgroundColour(number);
                var highlightColour = GetBallHighlightColour(number);
                
                <div class="tray-ball" style="background: radial-gradient(circle at 30% 30%, @highlightColour, @backgroundColour);">@number</div>
            }
        </div>
    }
    
    @if (_game.IsOver)
    {
        <div class="modal show" tabindex="-1" style="display: block;">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">
                            @switch (_game.Result)
                            {
                                case Result.Win:
                                    @("You Win!")
                                    break;
                                case Result.Lose:
                                    @("Game Over")
                                    break;
                                default:
                                    @("Game Status")
                                    break;
                            }
                        </h5>
                    </div>
                    <div class="modal-body">
                        <p>
                            @switch (_game.Result)
                            {
                                case Result.Win:
                                    @("Congratulations! You've completed the game successfully!")
                                    break;
                                case Result.Lose:
                                    @("You lost the game! Better luck next time.")
                                    break;
                                default:
                                    @("Game has ended.")
                                    break;
                            }
                        </p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-success" @onclick="StartGame">Play Again</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop show"></div>
    }
    
    @if (_game.HasBingo)
    {
        <h1>Bingo!</h1>
    }
}

@if (_game is null)
{
    <button class="btn btn-primary" @onclick="StartGame">New Game</button>
}

@code {
    private Game? _game;

    private void StartGame()
    {
        _game = new Game();
        _game.Timer.OnTick += TimerTick;
        _game.Timer.OnTimeUp += HandleOnTimeUp;
    }

    private void HandleOnTimeUp()
    {
        InvokeAsync(StateHasChanged);
    }

    private void TimerTick()
    {
        InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Js.InvokeVoidAsync("keyboardInterop.initialize",
                DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public Task OnKeyDown(string key)
    {
        if (_game is null || _game.IsOver)
        {
            return Task.CompletedTask;
        }

        switch (key)
        {
            case "a":
                _game.AcceptCurrentNumber();
                break;
            case "r":
                _game.RejectCurrentNumber();
                break;
        }
        
        StateHasChanged();
        return Task.CompletedTask;
    }

    private string GetBallBackgroundColour(int number)
    {
        switch (number)
        {
            case <= 9:
                return "#e6194B"; // Red
            case <= 19:
                return "#f58231"; // Orange
            case <= 29:
                return "#ffe119"; // Yellow
            case <= 39:
                return "#bfef45"; // Lime
            case <= 49:
                return "#3cb44b"; // Green
            case <= 59:
                return "#42d4f4"; // Teal
            case <= 69:
                return "#4363d8"; // Blue
            case <= 79:
                return "#911eb4"; // Purple
            default:
                return "#f032e6"; // Pink
        }
    }

    private string GetBallHighlightColour(int number)
    {
        switch (number)
        {
            case <= 9:
                return "#FC9597"; // Red
            case <= 19:
                return "#FFBB8E"; // Orange
            case <= 29:
                return "#FFEE93"; // Yellow
            case <= 39:
                return "#E0F7A0"; // Lime
            case <= 49:
                return "#9ED79C"; // Green
            case <= 59:
                return "#AAE8F9"; // Teal
            case <= 69:
                return "#A2A6EB"; // Blue
            case <= 79:
                return "#C78BD7"; // Purple
            default:
                return "#FD9FF3"; // Pink
        }
    }
}
